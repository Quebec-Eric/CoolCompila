README file for Programming Assignment 3 (C++ edition)
======================================================

Your directory should now contain the following files:

 Makefile		  -> [course dir]/src/PA3/Makefile
 README
 cool.y
 bad.cl
 good.cl
 cool-tree.handcode.h
 cool-tree.cc		  -> [course dir]/src/PA3/cool-tree.cc
 cool-tree.aps		  -> [course dir]/src/PA3/cool-tree.aps
 dumptype.cc		  -> [course dir]/src/PA3/dumptype.cc
 handle_flags.c           -> [course dir]/src/PA3/handle_flags.cc
 parser-phase.cc	  -> [course dir]/src/PA3/parser-phase.cc
 stringtab.cc		  -> [course dir]/src/PA3/stringtab.cc
 tokens-lex.cc		  -> [course dir]/src/PA3/tokens-lex.cc
 tree.cc		  -> [course dir]/src/PA3/tree.cc
 utilities.cc		  -> [course dir]/src/PA3/utilities.cc
 *.d			  dependency files
 *.*			  other generated files

The include (.h) files for this assignment can be found in 
[course dir]/include/PA3

	The Makefile contains targets for compiling and running your
	program. DO NOT MODIFY.
    
	The README contains this info. Part of the assignment is to
	fill in the README with the write-up for your project. You should
	explain design decisions, explain why your code is correct, and why
	your test cases are adequate. It is part of the assignment to
	clearly and concisely explain things in text as well as to comment
	your code. Just edit this file.

	cool.y is the skeleton for the parser specification that you
	are to write. It already contains productions for the program
	and the classes. Use them as an example to write the remaining
	productions.  You should also read the bison documentation.
	This skeleton will compile and run as is, but it doesn't
	do much.

	good.cl, bad.cl test a few features of the grammar. You should
	add tests to ensure that good.cl exercises every legal
	construction of the grammar and that bad.cl exercises as many
	different parsing errors as you can squeeze into one file.

	cool-tree.aps contains the definitions for the tree language
	which you use to construct the abstract syntax tree (AST).
	From this file, cool-tree.h and cool-tree.cc are automatically 
        generated by a utility that compiles the specification into
        C++ functions for producing and consuming the tree nodes.
        This file is provided for your reference.  DO NOT MODIFY.

        tree.{cc|h} contain definitions used by the tree package.
        cool-tree.handcode.h is the handwritten extension to
        cool-tree.h.  If you read cool-tree.h and cool-tree.cc, you will
        note that there are "hooks" for extending the classes
        declarations.  Extending and modifying the tree package is
        discussed in the "Cool Tour", but you do not need to (and should
        not) modify the tree package for this assignment.

	tokens-lex.cc is a lexer capable of reading a token stream from
	console in the format produced by the lexer phase. DO NOT
	MODIFY.

        parser-phase.cc contains a driver to test the parser. DO NOT
        MODIFY.

	dumptype.cc prints the AST out in a form readable by the
	semant phase of the compiler. DO NOT MODIFY.

	handle_flags.cc implements routines for parsing command line
        flags. DO NOT MODIFY.

        The rest of the files are created as byproducts of `bison'.
        `cool-parse.cc' is the generated C++ file containing the
        parser.

	Files not discussed are covered in the README for PA2.

Instructions
------------

	To compile your parser program type:

	% gmake parser

	This produces an executable named "parser" which is standalone
	phase of the Cool compiler.  It requires lexer, semant, and cgen
	to do anything useful.

	To test your parser on a file 'foo.cl' type

	% myparser foo.cl

	myparser is a shell script that "glues" together lexer and
	parser using pipes.

	To run your parser on the files good.cl and bad.cl type:

	% gmake dotest

	If you think your parser is correct and behaves like
	the one we wrote, you may want to run a COOL compiler using
	your parser:

	% mycoolc foo.cl

	To overwrite the default lexical analyzer with yours, replace 
	lexer (which is a symbolic link to the "official" lexer) with
        your lexer from PA2.

	To turnin your work type:

	% gmake submit-clean

	And run the "submit" program following the instructions on the
	course web page.
	
	Running "submit" will collect the files cool.y, good.cl, bad.cl,
	good.output, bad.output, and README. Don't forget to edit the
	README file to include your write-up, and to write your own test
	cases in good.cl and bad.cl.

 	You may turn in the assignment as many times as you like.
	However, only the last version will be retained for
	grading.

	If you change architectures you must issue

	% gmake clean

	when you switch from one type of machine to the other.
	If at some point you get weird errors from the linker,	
	you probably forgot this step.

	GOOD LUCK!

---8<------8<------8<------8<---cut here---8<------8<------8<------8<---

## Write-up for PA3
----------------

## Alunos :Bruno Pena Baeta, Diogo Fasciani, Eric Azevedo de Oliveira, July Ferreira

## O código do parser presente no arquivo cool.y foi separado da seguinte forma:
##Classes
program: Representa a AST. Todas as classes definidas no código fonte serão filhas deste nó.

class_list: Representa uma lista de classes presentes no código fonte.

## Union - Todos os tipos possíveis de nós que podem estar presentes na AST

  Boolean boolean;
  Symbol symbol;
  Program program;
  Class_ class_;
  Classes classes;
  Feature feature;
  Features features;
  Formal formal;
  Formals formals;
  Case case_;
  Cases cases;
  Expression expression;
  Expressions expressions;
  char *error_msg;

## Token Esta seção define os tokens que serão gerados pelo lexer e consumidos pelo parser.

%token CLASS 258 ELSE 259 FI 260 IF 261 IN 262 
%token INHERITS 263 LET 264 LOOP 265 POOL 266 THEN 267 WHILE 268
%token CASE 269 ESAC 270 OF 271 DARROW 272 NEW 273 ISVOID 274
%token <symbol>  STR_CONST 275 INT_CONST 276 
%token <boolean> BOOL_CONST 277
%token <symbol>  TYPEID 278 OBJECTID 279 
%token ASSIGN 280 NOT 281 LE 282 ERROR 283

## Types - Da bind nos nao terminais a tipos

%type <program> program
%type <classes> class_list
%type <class_> class
%type <features> dummy_feature_list  //lista ficticia de caracteristicas
%type <feature> feature // representacao de uma unica caracteristica
%type <formals> parameter_list // lista de caracteristica
%type <formal> formal // representao um unico paramentro
%type <cases> case_list //uma listade  branch
%type <case_> case // uma unica branch
%type <expressions> expression_list1 //espressao separadas por virgula
%type <expressions> expression_list2 //expressao separada por ponto e virgula
%type <expression> expression //expressao
%type <expression> let //declaracao
%type <expression> optional_assign //declaracao
%type <error_msg> error_token

## Precedence Operations - Precedencia de operacoes

%nonassoc '<' '=' '>' LE 
%left '+' '-' 
%left '*' '/'  
%right '~'  
%right '!' 
%left '.'
%right FLAG
%right ASSIGN
%right NOT
%left ISVOID

## Gramática
Aqui, as regras da gramática são definidas. Cada regra corresponde a um tipo de nó que pode ser criado na AST.

program: Representa o nó raiz da ASA. 

class_list: Mantém uma lista de todas as classes definidas no programa. 

class: Representa uma classe. 

dummy_feature_list: Uma lista vazia ou preenchida com métodos ou atributos da classe.

parameter_list: Lista de argumentos para um método. Pode estar vazia ou conter um ou mais argumentos.

feature: Métodos e atributos da classe.

formal: Representa um argumento formal em um método, que consiste em um nome e um tipo.

optional_assign: Atribuição opcional para um atributo. Um atributo pode ou não ter um valor inicial.

expression_list1: Lista de expressões separadas por vírgulas. 

expression_list2: Lista de expressões separadas por ponto e vírgula. 

expression: Representa as expressões presentes no código fonte.


## Regras Especiais
error_token: Usado para lidar com erros de sintaxe.

optional_assign: Trata a inicialização opcional de variáveis.

let: Trata a declaração de variáveis locais


## Compilação 

make clean
make parser 
make 
./lexer good.cl | ./parser 

## Tests - Testes realizados em good.cl e bad.cl:

good.cl - Retornou a AST sem problemas

bad.cl - Para cada situacao de erro, o parser identificou e retornou a linha do erro
		 A cada erro identificado, a linha foi comentada e o parser for executado nova-
		 mente, ate que nenhum erro foi encontrado e a AST foi retornada.