README file for Programming Assignment 2 (C++ edition)
=====================================================

Your directory should now contain the following files:

 Makefile        -> [course dir]/src/PA2/Makefile
 README
 cool.flex
 test.cl
 lextest.cc      -> [course dir]/src/PA2/lextest.cc
 mycoolc         -> [course dir]/src/PA2/mycoolc
 stringtab.cc    -> [course dir]/src/PA2/stringtab.cc
 utilities.cc    -> [course dir]/src/PA2/utilities.cc
 handle_flags.cc -> [course dir]/src/PA2/handle_flags.cc
 *.d             dependency files
 *.*             other generated files

The include (.h) files for this assignment can be found in 
[course dir]/include/PA2

	The Makefile contains targets for compiling and running your
	program. DO NOT MODIFY.

	The README contains this info. Part of the assignment is to fill
	the README with the write-up for your project. You should
	explain design decisions, explain why your code is correct, and
	why your test cases are adequate. It is part of the assignment
	to clearly and concisely explain things in text as well as to
	comment your code. Just edit this file.

	cool.flex is a skeleton file for the specification of the
	lexical analyzer. You should complete it with your regular
	expressions, patterns and actions. Information on how to do this
	is in the flex manual, which is part of your reader.

	test.cl is a COOL program that you can test the lexical
	analyzer on. It contains some errors, so it won't compile with
	coolc. However, test.cl does not exercise all lexical
	constructs of COOL and part of your assignment is to rewrite
	test.cl with a complete set of tests for your lexical analyzer.

	cool-parse.h contains definitions that are used by almost all parts
	of the compiler. DO NOT MODIFY.

	stringtab.{cc|h} and stringtab_functions.h contains functions
        to manipulate the string tables.  DO NOT MODIFY.

	utilities.{cc|h} contains functions used by the main() part of
	the lextest program. You may want to use the strdup() function
	defined in here. Remember that you should not print anything
	from inside cool.flex! DO NOT MODIFY.

	lextest.cc contains the main function which will call your
	lexer and print out the tokens that it returns.  DO NOT MODIFY.

	mycoolc is a shell script that glues together the phases of the
	compiler using Unix pipes instead of statically linking code.  
	While inefficient, this architecture makes it easy to mix and match
	the components you write with those of the course compiler.
	DO NOT MODIFY.	

        cool-lexer.cc is the scanner generated by flex from cool.flex.
        DO NOT MODIFY IT, as your changes will be overritten the next
        time you run flex.

 	The *.d files are automatically generated Makefiles that capture
 	dependencies between source and header files in this directory.
 	These files are updated automatically by Makefile; see the gmake
 	documentation for a detailed explanation.

Instructions
------------

	To compile your lextest program type:

	% gmake lexer

	Run your lexer by putting your test input in a file 'foo.cl' and
	run the lextest program:

	% ./lexer foo.cl

	To run your lexer on the file test.cl type:

	% gmake dotest

	If you think your lexical analyzer is correct and behaves like
	the one we wrote, you can actually try 'mycoolc' and see whether
	it runs and produces correct code for any examples.
	If your lexical analyzer behaves in an
	unexpected manner, you may get errors anywhere, i.e. during
	parsing, during semantic analysis, during code generation or
	only when you run the produced code on spim. So beware.

	To turnin your work type:

	% gmake submit-clean

	And run the "submit" program following the instructions on the
	course web page.
	
	Running "submit" will collect the files cool.flex, test.cl,
	README, and test.output. Don't forget to edit the README file to
	include your write-up, and to write your own test cases in
	test.cl.

 	You may turn in the assignment as many times as you like.
	However, only the last version will be retained for
	grading.

	If you change architectures you must issue

	% gmake clean

	when you switch from one type of machine to the other.
	If at some point you get weird errors from the linker,	
	you probably forgot this step.

	GOOD LUCK!

---8<------8<------8<------8<---cut here---8<------8<------8<------8<---

Write-up for PA2
----------------
#Alunos :Bruno Pena Baeta, Diogo Fasciani, Eric Azevedo de Oliveira, July Ferreira

##O código do lexer presente no arquivo cool.flex foi separado da seguinte forma:


**Primeiramente foram feitas as  declarações, onde contém variáveis e função que foram úteis para o desenvolvimento do lexer.**

```c++
ANYTHING            (.|"\n")*
LETTER              [a-zA-Z]+
INT_CONST           [0-9]+
BOOL_CONST          ((t)(?i:rue)|(f)(?i:alse))
STR_CONST            \"{ANYTHING}\"
OPERATOR            ("+"|"-"|"*"|"/")
COMPARISON_OP       ("<"|"=")
SPECIAL_CHAR        ({COMPARISON_OP}|"("|")"|"{"|"}"|";"|":"|"."|","|"~"|"@")
WHITE_SPACE         (" "|\f|\r|\t|\v)
TYPEID              ("SELF_TYPE"|[A-Z]({LETTER}|{INT_CONST}|"_")*)
OBJECTID            ("self"|{LETTER}({LETTER}|{INT_CONST}|"_")*)
DARROW              "=>"
LE                  "<="
ASSIGN              "<-"
```

**Em segundo lugar foram escritas as definições, parte onde foram definidas expressões regulares para alguns tokens, facilitando o processo de escrita de regras.**

```c++
CLASS               (?i:class)
INHERITS            (?i:inherits)
NEW                 (?i:new)
ELSE                (?i:else)
FI                  (?i:fi)
IF                  (?i:if)
IN                  (?i:in)
LET                 (?i:let)
THEN                (?i:then)
WHILE               (?i:while)
LOOP                (?i:loop)
POOL                (?i:pool)

```



**Depois, foram escritas as regras do lexer. As primeiras regras escritas foram a respeito dos comentários, já que, qualquer coisa escrita dentro de comentários deve ser ignorada. Em seguida, foram escritas as regras referente às palavras-chaves, que também são palavras reservadas em COOL. Ao final das regras, foram escritas as regras das strings, ints, bools, objetos e operadores.**

```c++
\n      {curr_lineno++;}

"(*"               { BEGIN(BLOCK_COMMENT); }
<BLOCK_COMMENT>"*)"  { BEGIN(INITIAL); }  


{CLASS}             return (CLASS);
{INHERITS}          return (INHERITS);  
{NEW}               return (NEW);
{ELSE}              return (ELSE);
{FI}                return (FI);
{IF}                return (IF);
{NOT}               return (NOT);

```



**Por último, foi feito o tratamento de erros. O tratamento de erros foi muito focado em strings, impedindo que strings não sejam fechadas e limitando o tamanho máximo delas. O último tratamento de erro é uma regra que, caso alguma sentença não combine com nenhuma das regras, ela irá combinar com essa última regra e devolverá erro.**


```c++
<STRING>.		{ 
	if (string_const_len >= MAX_STR_CONST) {
		strcpy(cool_yylval.error_msg, "String constant too long");
		BEGIN 0; return (ERROR);
	} 
	string_const[string_const_len++] = yytext[0]; 
}


<BLOCK_COMMENT><<EOF>> { 
    strcpy(cool_yylval.error_msg, "Comentario não fechado");
    BEGIN(INITIAL); 
    return (ERROR); 
}

.                   { cool_yylval.error_msg = yytext;
                      return (ERROR);
                    }
```

Os testes foram feitos com diversos arquivos, tendo várias alterações no test.cl e usado o arquivo stack.cl do PA1. Em todos os testes feitos o lexer teve êxito.


```c++
cells <- (new CellularAutomaton).init("         X         ");
```
**STR_CONST "         X         "**

```c++
cells <- (new CellularAutomaton).init("         X         );
```
**ERROR "String Not finished"**

```c++
(* end let countdown*)
```
**#89 ')'#89 ';' #90 OBJECTID self #90 ';' #91 '}' #93 '}' #93 ';' #94 '}' #94 '; '**

```c++
(* end let countdown
```
**#89 ERROR "Comentario nao fechado"**